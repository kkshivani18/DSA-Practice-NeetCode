class Solution {
public:
    int m, n;
    vector<vector<int>> dp;
    vector<vector<int>> directions = {{1,0}, {-1,0}, {0,1}, {0,-1}};

    int dfs(vector<vector<int>>& matrix, int i, int j){
        if(dp[i][j]) return dp[i][j];

        int maxVal = 1;
        for(auto& dir : directions){
            int ax = i + dir[0];
            int ay = j + dir[1];
            if(ax >= 0 && ax < m && ay >= 0 && ay < n && matrix[ax][ay] > matrix[i][j]){
                maxVal = max(maxVal, 1 + dfs(matrix, ax, ay));
            }
        }
        dp[i][j] = maxVal;   
        return maxVal;
    }

    int longestIncreasingPath(vector<vector<int>>& matrix) {
        m = matrix.size();
        n = matrix[0].size();
        dp = vector<vector<int>> (m, vector<int> (n, 0));
        int result = 0;

        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                result = max(result, dfs(matrix, i, j));
            }
        }
        return result;
    }
};
