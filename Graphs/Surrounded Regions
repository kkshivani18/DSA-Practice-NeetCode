class Solution {
public:
    int rows, cols;
    vector<pair<int, int>> directions = {{1,0}, {-1,0}, {0,1}, {0,-1}};

    void dfs(int i, int j, vector<vector<char>>& board){
        if(i < 0 || j < 0 || i >= rows || j >= cols || board[i][j] != 'O') return;

        board[i][j] = 'T';

        for(auto [dx, dy]: directions){
            int ax = i + dx;
            int ay = j + dy;
            dfs(ax, ay, board); 
        }
    }

    void solve(vector<vector<char>>& board) {
        if(board.empty()) return;

        rows = board.size();
        cols = board[0].size();

        for(int i=0; i<rows; i++){
            if(board[i][0] == 'O') dfs(i, 0, board);
            if(board[i][cols - 1] == 'O') dfs(i, cols-1, board);
        }

        for(int j=0; j<cols; j++){
            if(board[0][j] == 'O') dfs(0, j, board);
            if(board[rows - 1][j] == 'O') dfs(rows-1, j, board);
        }
        
        for(int i=0; i<rows; i++){
            for(int j=0; j<cols; j++){
                if(board[i][j] == 'O') board[i][j] = 'X';
                if(board[i][j] == 'T') board[i][j] = 'O';
            }
        }
    }
};
