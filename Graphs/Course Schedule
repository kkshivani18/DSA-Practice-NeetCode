class Solution {
public:
    bool dfs(int course, vector<vector<int>>& graph, vector<bool>& visited, vector<bool>& inPath){
        if(inPath[course]) return true;
        if(visited[course]) return false;

        visited[course] = true;
        inPath[course] = true;

        for(int neighbor : graph[course]){
            if(dfs(neighbor, graph, visited, inPath)){
                return true;
            }
        }
        inPath[course] = false;
        return false;
    }

    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<vector<int>> graph(numCourses);

        for(auto& pre : prerequisites){
            graph[pre[1]].push_back(pre[0]);
        }

        vector<bool> visited(numCourses, false);
        vector<bool> inPath(numCourses, false);

        for(int i=0; i<numCourses; i++){
            if(!visited[i]){
                if(dfs(i, graph, visited, inPath)){
                    return false;
                }
            }
        }
        return true;
    }
};
