class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<pair<int,int>> directions = {{1,0}, {-1, 0}, {0,1}, {0,-1}};
        queue<pair<int, int>> q;
        int fresh = 0;

        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == 2) {
                    q.push({i, j});
                } else if(grid[i][j] == 1) {  
                    fresh++;
                }
            }
        }

        if(fresh == 0) return 0;
        int minute = 0;

        while(!q.empty()) {
            int size = q.size();
            bool rotten = false;

            for(int i = 0; i < size; i++) {
                auto [x, y] = q.front(); 
                q.pop(); 
                for(auto [dx, dy] : directions) {
                    int ax = x + dx;
                    int ay = y + dy;
                    if(ax >= 0 && ax < m && ay >= 0 && ay < n && grid[ax][ay] == 1) {
                        grid[ax][ay] = 2;
                        q.push({ax, ay});
                        fresh--;
                        rotten = true;
                    }
                }
            }
            if(rotten) minute++;
        }
        return fresh == 0 ? minute : -1;
    }
};
