class Solution {
public:
    vector<vector<int>> result;


    vector<vector<int>> combinationSum(vector<int>& nums, int target) {
        vector<int> curr;
        backtrack(nums, target, curr, 0);
        return result;
    }


    void backtrack(vector<int>& nums, int target, vector<int> curr, int index){
        if(target == 0){
            result.push_back(curr);
            return;
        }


        if(target < 0 || index == nums.size()) return;


        curr.push_back(nums[index]);
        backtrack(nums, target - nums[index], curr, index);


        curr.pop_back();
        backtrack(nums, target, curr, index + 1);
    }
};
